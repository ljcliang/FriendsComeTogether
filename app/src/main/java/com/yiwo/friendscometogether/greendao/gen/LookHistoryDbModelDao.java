package com.yiwo.friendscometogether.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yiwo.friendscometogether.dbmodel.LookHistoryDbModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOOK_HISTORY_DB_MODEL".
*/
public class LookHistoryDbModelDao extends AbstractDao<LookHistoryDbModel, Long> {

    public static final String TABLENAME = "LOOK_HISTORY_DB_MODEL";

    /**
     * Properties of entity LookHistoryDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Pic_url = new Property(3, String.class, "pic_url", false, "PIC_URL");
        public final static Property Look_time = new Property(4, String.class, "look_time", false, "LOOK_TIME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Look_id = new Property(6, String.class, "look_id", false, "LOOK_ID");
    }


    public LookHistoryDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public LookHistoryDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOOK_HISTORY_DB_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"TITLE\" TEXT," + // 2: title
                "\"PIC_URL\" TEXT," + // 3: pic_url
                "\"LOOK_TIME\" TEXT," + // 4: look_time
                "\"TYPE\" TEXT," + // 5: type
                "\"LOOK_ID\" TEXT);"); // 6: look_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOOK_HISTORY_DB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LookHistoryDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(4, pic_url);
        }
 
        String look_time = entity.getLook_time();
        if (look_time != null) {
            stmt.bindString(5, look_time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String look_id = entity.getLook_id();
        if (look_id != null) {
            stmt.bindString(7, look_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LookHistoryDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(4, pic_url);
        }
 
        String look_time = entity.getLook_time();
        if (look_time != null) {
            stmt.bindString(5, look_time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String look_id = entity.getLook_id();
        if (look_id != null) {
            stmt.bindString(7, look_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LookHistoryDbModel readEntity(Cursor cursor, int offset) {
        LookHistoryDbModel entity = new LookHistoryDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // look_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // look_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LookHistoryDbModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLook_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLook_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LookHistoryDbModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LookHistoryDbModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LookHistoryDbModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
