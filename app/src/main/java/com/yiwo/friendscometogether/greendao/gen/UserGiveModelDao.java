package com.yiwo.friendscometogether.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yiwo.friendscometogether.dbmodel.UserGiveModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_GIVE_MODEL".
*/
public class UserGiveModelDao extends AbstractDao<UserGiveModel, Long> {

    public static final String TABLENAME = "USER_GIVE_MODEL";

    /**
     * Properties of entity UserGiveModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property ArticleId = new Property(2, String.class, "articleId", false, "ARTICLE_ID");
        public final static Property RemarkState = new Property(3, String.class, "remarkState", false, "REMARK_STATE");
        public final static Property ArticleType = new Property(4, String.class, "articleType", false, "ARTICLE_TYPE");
    }


    public UserGiveModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserGiveModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_GIVE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ARTICLE_ID\" TEXT," + // 2: articleId
                "\"REMARK_STATE\" TEXT," + // 3: remarkState
                "\"ARTICLE_TYPE\" TEXT);"); // 4: articleType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_GIVE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserGiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(3, articleId);
        }
 
        String remarkState = entity.getRemarkState();
        if (remarkState != null) {
            stmt.bindString(4, remarkState);
        }
 
        String articleType = entity.getArticleType();
        if (articleType != null) {
            stmt.bindString(5, articleType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserGiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(3, articleId);
        }
 
        String remarkState = entity.getRemarkState();
        if (remarkState != null) {
            stmt.bindString(4, remarkState);
        }
 
        String articleType = entity.getArticleType();
        if (articleType != null) {
            stmt.bindString(5, articleType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserGiveModel readEntity(Cursor cursor, int offset) {
        UserGiveModel entity = new UserGiveModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // articleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remarkState
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // articleType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserGiveModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticleId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemarkState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticleType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserGiveModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserGiveModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserGiveModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
